import os
import sys
import logging
import telebot
from telebot import types
from langchain_community.vectorstores import FAISS
from langchain_text_splitters import RecursiveCharacterTextSplitter
from langchain_community.document_loaders import PyPDFLoader
from llm_and_embeddings import get_embeddings, create_conversational_rag_chain 

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

API_TOKEN = os.getenv('API_TOKEN')
CREDENTIALS = os.getenv('CREDENTIALS')

class RAGBot:
    def __init__(self, token, credentials):
        self.bot = telebot.TeleBot(token)
        self.credentials = credentials
        self.vector_store = FAISS.load_local(folder_path='db2/', embeddings=get_embeddings(), allow_dangerous_deserialization=True)
        self.retriever = self.vector_store.as_retriever(search_kwargs={"k": 3})
        self.conversational_rag_chain, _ = create_conversational_rag_chain(retriever=self.retriever, credentials=self.credentials)
        self.file_names = self.get_file_names()
        self.setup_message_handlers()

    def restart_bot(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç."""
        os.execv(sys.executable, ['python'] + sys.argv)

    def setup_message_handlers(self):
        @self.bot.message_handler(content_types=['audio', 'video', 'photo', 'sticker', 'voice', 'location', 'contact'])
        def not_text(message):
            self.send_message(message.from_user.id, '–Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏!')
        
        @self.bot.message_handler(content_types=['document'])
        def add_document(document):
            self.handle_add_document(document)

        @self.bot.message_handler(commands=['restart'], content_types=['text'])
        def restarting(message):
            self.send_message(message.chat.id, "–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
            self.restart_bot()

        @self.bot.message_handler(commands=['help', 'start'], content_types=['text'])
        def send_welcome(message):
            self.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç. –Ø RAG-–±–æ—Ç. –í –º–µ–Ω—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —è –º–æ–≥—É –ø–æ –Ω–∏–º –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å", reply_markup=self.get_markup())

        @self.bot.message_handler(content_types=['text'])
        def answer_the_question(message):
            self.handle_answer_question(message)

    def send_message(self, user_id, text, reply_markup=None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        self.bot.send_message(user_id, text, reply_markup=reply_markup)

    def get_markup(self):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = types.KeyboardButton('üóëÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞')
        button2 = types.KeyboardButton('‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ')
        button3 = types.KeyboardButton('üìÑ –î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç')
        markup.add(button2, button3, button1)
        return markup

    def get_file_names(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ files, –∫—ç—à–∏—Ä—É—è –∏—Ö."""
        if not hasattr(self, '_file_names_cache'):
            self._file_names_cache = [f for f in os.listdir('files') if f.endswith('.pdf')]
        return self._file_names_cache

    def handle_add_document(self, document):
        try:
            if not document.document.file_name.endswith('.pdf'):
                self.send_message(document.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.")
                return
            
            file_info = self.bot.get_file(document.document.file_id)
            downloaded_file = self.bot.download_file(file_info.file_path)
            src = f'files/{document.document.file_name}'
            
            with open(src, 'wb') as new_file:
                new_file.write(downloaded_file)
            
            loader = PyPDFLoader(src)
            doc = loader.load()
            text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=300)
            self.send_message(document.from_user.id, f'–í—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ñ–∞–π–ª: {document.document.file_name}')
            self.vector_store.add_documents(text_splitter.split_documents(doc))
            self.update_retriever()
            self.file_names = self.get_file_names()
            os.remove(src)
            logging.info(f'–§–∞–π–ª {document.document.file_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.')

        except FileNotFoundError:
            self.send_message(document.from_user.id, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            logging.error(f'–û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω - {document.document.file_name}')
        except telebot.apihelper.ApiException:
            self.send_message(document.from_user.id, "–û—à–∏–±–∫–∞ API.")
            logging.error("–û—à–∏–±–∫–∞ API –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
        except Exception as e:
            self.send_message(document.from_user.id, str(e))
            logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}')

    def update_retriever(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç retriever –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞."""
        self.retriever = self.vector_store.as_retriever(search_kwargs={"k": 3})
        self.conversational_rag_chain, _ = create_conversational_rag_chain(retriever=self.retriever, credentials=self.credentials)

    def handle_answer_question(self, message):
        if message.text == '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ':
            self.send_message(message.from_user.id, f'–Ø RAG-–±–æ—Ç. –Ø –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏:\n\n {self.file_names}')
        elif message.text == 'üìÑ –î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç':
            self.send_message(message.from_user.id, '–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ. –î–æ–∫—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ PDF')
        elif message.text == 'üóëÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞':
            self.send_message(message.chat.id, "–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
            self.restart_bot()
        else:
            response = self.conversational_rag_chain.invoke({'input': message.text}, config={
                "configurable": {"session_id": message.chat.id}
            })
            self.send_message(message.chat.id, response['answer'])

    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
        self.bot.polling(none_stop=True)

if __name__ == '__main__':
    rag_bot = RAGBot(API_TOKEN, CREDENTIALS)
    rag_bot.run()